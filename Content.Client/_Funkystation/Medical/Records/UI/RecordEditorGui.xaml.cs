using Content.Shared.Preferences;
using Content.Shared._CD.Records;
using Content.Client._CD.Records.UI;
using Content.Shared._Funkystation.Records;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface;

namespace Content.Client._Funkystation.Medical.Records.UI;

/// <summary>
/// The record editor tab that gets "injected" into the character editor.
/// </summary>
[GenerateTypedNameReferences]
public sealed partial class RecordEditorGui : Control
{
    /// <summary>
    /// Delegate that tells the editor to save records when the save button is pressed
    /// </summary>
    private readonly Action<PlayerProvidedCharacterRecords> _updateProfileRecords;

    private PlayerProvidedCharacterRecords _records = default!;

    public RecordEditorGui(Action<PlayerProvidedCharacterRecords> updateProfileRecords)
    {
        RobustXamlLoader.Load(this);
        _updateProfileRecords = updateProfileRecords;

        #region initialization

        // add options to each dropdown depending on the enums
        foreach (var insuranceProvider in Enum.GetValues<InsuranceProviders>())
        {
            AddInsuranceProvider(insuranceProvider);
        }

        foreach (var insurancetype in Enum.GetValues<InsuranceTypes>())
        {
            AddInsuranceType(insurancetype);
        }

        foreach (var bloodtype in Enum.GetValues<BloodTypes>())
        {
            AddBloodType(bloodtype);
        }

        #endregion

        #region GeneralInformation

        HeightEdit.OnTextChanged += args =>
        {
            if (!int.TryParse(args.Text, out var newHeight))
                return;
            UpdateImperialHeight(newHeight);
            UpdateRecords(_records.WithHeight(newHeight));
        };

        WeightEdit.OnTextChanged += args =>
        {
            if (!int.TryParse(args.Text, out var newWeight))
                return;
            UpdateImperialWeight(newWeight);
            UpdateRecords(_records.WithWeight(newWeight));
        };

        IdentifyingFeaturesEdit.OnTextChanged += args =>
        {
            UpdateRecords(_records.WithIdentifyingFeatures(args.Text));
        };

        WorkAuthCheckBox.OnToggled += args =>
        {
            UpdateRecords(_records.WithWorkAuth(args.Pressed));
        };

        InsuranceCheckBox.OnToggled += args =>
        {
            UpdateRecords(_records.WithInsurance(args.Pressed));
        };

        InsuranceCompanyDropdown.OnItemSelected += args =>
        {
            UpdateRecords(_records.WithInsuranceProvider(args.Id));
        };

        InsurancePlanDropdown.OnItemSelected += args =>
        {
            UpdateRecords(_records.WithInsuranceType(args.Id));
        };

        #endregion

        #region MedicalInformation

        BloodTypeDropdown.OnItemSelected += args =>
        {
            UpdateRecords(_records.WithBloodType(args.Id));
        };

        PostmortemEdit.OnTextChanged += args =>
        {
            UpdateRecords(_records.WithPostmortemInstructions(args.Text));
        };

        #endregion
    }

    public void Update(HumanoidCharacterProfile? profile)
    {
        _records = profile?.CDCharacterRecords ?? PlayerProvidedCharacterRecords.DefaultRecords();
        UpdateWidgets();
    }

    private void UpdateRecords(PlayerProvidedCharacterRecords records)
    {
        records.EnsureValid();
        _records = records;
        _updateProfileRecords(_records);
        UpdateWidgets();
    }

    private void UpdateWidgets()
    {
        // general information
        HeightEdit.SetText(_records.Height.ToString());
        UpdateImperialHeight(_records.Height);
        WeightEdit.SetText(_records.Weight.ToString());
        UpdateImperialWeight(_records.Weight);

        IdentifyingFeaturesEdit.SetText(_records.IdentifyingFeatures);

        WorkAuthCheckBox.Pressed = _records.HasWorkAuthorization;

        InsuranceCheckBox.Pressed = _records.HasInsurance;

        // this feels nasty
        if (_records.HasInsurance == false)
        {
            InsuranceCompanyDropdown.SelectId(0);
            InsuranceCompanyDropdown.Disabled = true;

            InsurancePlanDropdown.SelectId(0);
            InsurancePlanDropdown.Disabled = true;
        }
        else
        {
            InsuranceCompanyDropdown.Disabled = false;
            InsuranceCompanyDropdown.SelectId(_records.InsuranceProvider);

            InsurancePlanDropdown.Disabled = false;
            InsurancePlanDropdown.SelectId(_records.InsuranceType);
        }

        // medical information

        BloodTypeDropdown.SelectId(_records.BloodType);
        PostmortemEdit.SetText(_records.PostmortemInstructions);
    }

    /* height/weight updating and conversion */
    private void UpdateImperialHeight(int newHeight)
    {
        HeightImperialLabel.Text = UnitConversion.GetImperialDisplayLength(newHeight);
    }

    private void UpdateImperialWeight(int newWeight)
    {
        WeightImperialLabel.Text = UnitConversion.GetImperialDisplayMass(newWeight);
    }

    /* insurance dropdowns */
    private void AddInsuranceProvider(InsuranceProviders provider)
    {
        var name = Loc.GetString($"character-records-insurance-provider-{provider.ToString().ToLower()}");
        InsuranceCompanyDropdown.AddItem(name, (int)provider);
    }

    private void AddInsuranceType(InsuranceTypes type)
    {
        var name = Loc.GetString($"character-records-insurance-type-{type.ToString().ToLower()}");
        InsurancePlanDropdown.AddItem(name, (int)type);
    }

    /* blood type dropdown */
    private void AddBloodType(BloodTypes type)
    {
        var name = Loc.GetString($"character-records-blood-{type.ToString().ToLower()}");
        BloodTypeDropdown.AddItem(name, (int)type);
    }
}
